package ${package};

import java.util.List;
#if(${importInColDto.date})
import java.util.Date;
#end
#if(${importDto.bigDecimal})
import java.math.BigDecimal;
#end
#if(${importDto.bigInteger})
import java.math.BigInteger;
#end
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Mapper;

import com.gitee.myclouds.toolbox.wrap.Dto;
import ${package}.${tableDto.upname}Entity;

/**
 * <b>$!{tableDto.comment}[${tableDto.name}]数据访问接口</b>
 * 
 * <p>
 * 注意:此文件由MyClouds平台自动生成-禁止手工修改
 * </p>
 * 
 * @author $!author
 * @date $!sysdate
 */
@Mapper
public interface ${tableDto.upname}Mapper {

	/**
	 * 插入一个数据实体对象(插入字段为传入Entity实体的非空属性)
	 * <p> 防止DB字段缺省值需要程序中再次赋值
	 *
	 * @param ${tableDto.name}Entity
	 *            要插入的数据实体对象
	 * @return 返回影响行数
	 */
	int insert(${tableDto.upname}Entity ${tableDto.lowname}Entity);
	
	/**
	 * 插入一个数据实体对象(含所有字段)
	 * 
	 * @param ${tableDto.name}Entity
	 *            要插入的数据实体对象
	 * @return 返回影响行数
	 */
	int insertAll(${tableDto.upname}Entity ${tableDto.lowname}Entity);

	/**
	 * 根据主键修改数据实体对象
	 * 
	 * @param ${tableDto.lowname}Entity
	 *            要修改的数据实体对象
	 * @return int 返回影响行数
	 */
	int updateByKey(${tableDto.upname}Entity ${tableDto.lowname}Entity);

	/**
	 * 根据主键查询并返回数据实体对象
	 * 
	 * @return ${tableDto.upname}Entity
	 */
	${tableDto.upname}Entity selectByKey(${bykey});

	/**
	 * 根据唯一组合条件查询并返回数据实体对象
	 * 
	 * @return ${tableDto.upname}Entity
	 */
	${tableDto.upname}Entity selectOne(Dto pDto);

	/**
	 * 根据Dto查询并返回数据实体对象集合
	 * 
	 * @return List<${tableDto.upname}Entity>
	 */
	List<${tableDto.upname}Entity> list(Dto pDto);

	/**
	 * 根据Dto查询并返回分页数据实体对象集合
	 * 
	 * @return List<${tableDto.upname}Entity>
	 */
	List<${tableDto.upname}Entity> listPage(Dto pDto);
		
	/**
	 * 根据Dto模糊查询并返回数据实体对象集合(字符型字段模糊匹配，其余字段精确匹配)
	 * 
	 * @return List<${tableDto.upname}Entity>
	 */
	List<${tableDto.upname}Entity> like(Dto pDto);

	/**
	 * 根据Dto模糊查询并返回分页数据实体对象集合(字符型字段模糊匹配，其余字段精确匹配)
	 * 
	 * @return List<${tableDto.upname}Entity>
	 */
	List<${tableDto.upname}Entity> likePage(Dto pDto);

	/**
	 * 根据主键删除数据实体对象
	 *
	 * @return 影响行数
	 */
	int deleteByKey(${bykey});
	
	/**
	 * 根据Dto统计行数
	 * 
	 * @param pDto
	 * @return
	 */
	int rows(Dto pDto);
	
	/**
	 * 根据数学表达式进行数学运算
	 * 
	 * @param pDto
	 * @return String
	 */
	String calc(Dto pDto);

#foreach($indexDto in $indexDtos)
	/**
	 * 根据唯一键[${indexDto.name}]修改数据实体对象
	 * 
	 * @param ${tableDto.lowname}Entity
	 *            要修改的数据实体对象
	 * @return int 返回影响行数
	 */
	int updateBy${indexDto.upname}(${tableDto.upname}Entity ${tableDto.lowname}Entity);

	/**
	 * 根据唯一键[${indexDto.name}]查询并返回数据实体对象
	 * 
	 * @return ${tableDto.upname}Entity
	 */
	${tableDto.upname}Entity selectBy${indexDto.upname}(${indexDto.bykey});
	
	/**
	 * 根据唯一键[${indexDto.name}]删除数据实体对象
	 *
	 * @return 影响行数
	 */
	int deleteBy${indexDto.upname}(${indexDto.bykey});
#end
	
}
